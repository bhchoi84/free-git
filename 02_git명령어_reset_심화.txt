# git 커밋 되돌리기 ( 1개 되돌리기 )
# 커밋만 되돌리고 수정된 내용은 남아있다. 
# ** 변경된 내용은 남아있다.
git reset HEAD~1 


git log --reflog

================
새커밋
================

------ 초록색 ( 기존 커밋에서 add ) -------
------ 빨간색 ( 기존 커밋에서 파일 변경 ) -------

================
기존커밋
================


아래 내용 
https://www.zerocho.com/category/Git/post/581b7122809622001722fc0b


Untracked           Unmodified           Modified            staged
----------------------------------------------------------------> ( Add the file)
                       ---------------------> ( Edit the File )
                                             -------------------> ( stage the file )

<--------------------------                        ( Remote the file)
                       <---------------------------------------- ( commit )


Unmodifed => 커밋한 직후  ( 커밋 후 변경 내용없음 )
Modified => 커밋 후 파일 추가 및 수정이 일어났을때 ( 수정 발생 )
위 staged => git status 초록색 ( git add 한 상태 index 부여되어 git에서 관리한다는 상태 )


위의 그림은 Untracked와 Tracked의 3단계를 보여줍니다. 
3단계로 Unmodified, Modified, Staged가 있는데요. 
Unmodified는 commit을 한 후 변경점이 없을 때,
Modified는 지금처럼 파일을 변경했을 때, 
Staged는 변경한 파일을 add했을 때의 상태입니다.

(초록색으로 표시되는 파일이 Staged입니다)

파일을 새로 만들어서 add해도 Staged에 등록됩니다. 
Staged는 이제 commit될 준비가 되었음을 뜻합니다.
Staged 상태의 파일을 commit하면 다시 Unmodified 상태가 됩니다.                       




새커밋 -> 되돌아갈때 
git reset HEAD~1
 => 빨간색 즉 modified 로 되돌아간다. ( 수정된 파일은 남고 commit 기록은 삭제 ) ====> mixed  ( 기본 아무 옵션 없을때 )
 ( git add 즉 staged 된 상태로 되돌아간다. ====> soft )
 수정 내용다없애고 되돌아 가고 싶다 ====> hard 


새커밋

기존 커밋 

위 상태에서 기존작업 모두 없애고 싶을때

 git reset --hard 

# 로그 확인 
git log 

# git reset 해시코드7자리
=> 해시코드7자리로 되돌아간다. ( mixed )

==> push 한 후 reset 하면 원격에는 남아 있는 상태에서 
local에서의 상태만 변경 되기 때문에 

서버 
3
2
1

local 
3 ( reset )
2 ( reset )
1 <=========== 현재 상태이므로 sync가 깨진다.





